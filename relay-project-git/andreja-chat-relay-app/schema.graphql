type AddToUsersMessagesPayload {
  viewer: Viewer!
  clientMutationId: String!
  postedByUser: User
  messagesMessage: Message
  postedByUserEdge: UserEdge
  messagesMessageEdge: MessageEdge
}

input AddToUsersMessagesUserInput {
  messagesMessageId: ID!
  postedByUserId: ID!
  clientMutationId: String!
}

input CreateMessage {
  text: String!
  postedById: ID
  postedBy: MessagepostedByUser
}

input CreateMessageInput {
  text: String!
  postedById: ID
  postedBy: MessagepostedByUser
  clientMutationId: String!
}

type CreateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  postedBy: User
}

input CreateUser {
  fullname: String!
  username: String!
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteMessageInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  postedBy: User
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

# HelloPayload
type HelloPayload {
  message: String!
}

type Message implements Node {
  createdAt: DateTime!
  id: ID!
  postedBy(filter: UserFilter): User
  text: String!
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge.
  node: Message!

  # A cursor for use in pagination.
  cursor: String!
}

input MessageFilter {
  # Logical AND on all given filters.
  AND: [MessageFilter!]

  # Logical OR on all given filters.
  OR: [MessageFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  postedBy: UserFilter
}

enum MessageOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
}

input MessagepostedByUser {
  fullname: String!
  username: String!
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
}

type Mutation {
  createMessage(input: CreateMessageInput!): CreateMessagePayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateMessage(input: UpdateOrCreateMessageInput!): UpdateOrCreateMessagePayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteMessage(input: DeleteMessageInput!): DeleteMessagePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToUsersMessages(input: AddToUsersMessagesUserInput!): AddToUsersMessagesPayload
  removeFromUsersMessages(input: RemoveFromUsersMessagesUserInput!): RemoveFromUsersMessagesPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type RemoveFromUsersMessagesPayload {
  viewer: Viewer!
  clientMutationId: String!
  postedByUser: User
  messagesMessage: Message
  postedByUserEdge: UserEdge
  messagesMessageEdge: MessageEdge
}

input RemoveFromUsersMessagesUserInput {
  messagesMessageId: ID!
  postedByUserId: ID!
  clientMutationId: String!
}

input SignupUserInput {
  fullname: String!
  username: String!
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
  clientMutationId: String!
}

input UpdateMessage {
  id: ID!
  text: String
  postedById: ID
  postedBy: MessagepostedByUser
}

input UpdateMessageInput {
  id: ID!
  text: String
  postedById: ID
  postedBy: MessagepostedByUser
  clientMutationId: String!
}

type UpdateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  postedBy: User
}

input UpdateOrCreateMessageInput {
  update: UpdateMessage!
  create: CreateMessage!
  clientMutationId: String!
}

type UpdateOrCreateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  postedBy: User
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateUser {
  fullname: String
  id: ID!
  username: String
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
}

input UpdateUserInput {
  fullname: String
  id: ID!
  username: String
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  fullname: String!
  id: ID!
  messages(filter: MessageFilter, orderBy: MessageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection
  username: String!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  fullname: String

  # All values that are not equal to given value.
  fullname_not: String

  # All values that are contained in given list.
  fullname_in: [String!]

  # All values that are not contained in given list.
  fullname_not_in: [String!]

  # All values less than the given value.
  fullname_lt: String

  # All values less than or equal the given value.
  fullname_lte: String

  # All values greater than the given value.
  fullname_gt: String

  # All values greater than or equal the given value.
  fullname_gte: String

  # All values containing the given string.
  fullname_contains: String

  # All values not containing the given string.
  fullname_not_contains: String

  # All values starting with the given string.
  fullname_starts_with: String

  # All values not starting with the given string.
  fullname_not_starts_with: String

  # All values ending with the given string.
  fullname_ends_with: String

  # All values not ending with the given string.
  fullname_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  username: String

  # All values that are not equal to given value.
  username_not: String

  # All values that are contained in given list.
  username_in: [String!]

  # All values that are not contained in given list.
  username_not_in: [String!]

  # All values less than the given value.
  username_lt: String

  # All values less than or equal the given value.
  username_lte: String

  # All values greater than the given value.
  username_gt: String

  # All values greater than or equal the given value.
  username_gte: String

  # All values containing the given string.
  username_contains: String

  # All values not containing the given string.
  username_not_contains: String

  # All values starting with the given string.
  username_starts_with: String

  # All values not starting with the given string.
  username_not_starts_with: String

  # All values ending with the given string.
  username_ends_with: String

  # All values not ending with the given string.
  username_not_ends_with: String
  messages_every: MessageFilter
  messages_some: MessageFilter
  messages_none: MessageFilter
}

input UsermessagesMessage {
  text: String!
}

enum UserOrderBy {
  fullname_ASC
  fullname_DESC
  id_ASC
  id_DESC
  username_ASC
  username_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allMessages(filter: MessageFilter, orderBy: MessageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Message(id: ID): Message
  User(id: ID, username: String): User

  # hello
  hello(name: String): HelloPayload
  id: ID!
}

enum _ModelMutationType {
CREATED
UPDATED
DELETED
}

type MessagePreviousValues {
createdAt: DateTime!
id: ID!
text: String!
}

type Subscription {
  Message(filter: MessageSubscriptionFilter): MessageSubscriptionPayload
}

input MessageSubscriptionFilter {
  mutation_in: [_ModelMutationType!]
}

type MessageSubscriptionPayload {
mutation: _ModelMutationType!
node: Message
updatedFields: [String!]
previousValues: MessagePreviousValues
}
